import streamlit as st
from bedrock_client import invoke_claude
from bedrock_agent_client import retrieve_and_generate_with_kb
import os

# Show title and description.
st.title("ðŸ’¬ Chatbot")
st.write(
    "This is a simple chatbot powered by AWS Bedrock's Claude model. "
    "You can ask questions and receive answers generated by the model. "
    "Optionally, you can enhance responses with retrieval-augmented generation from specific knowledge bases or datasources. "
)

st.markdown("---")

# Create a session state variable to store the chat messages. This ensures that the
# messages persist across reruns.
if "messages" not in st.session_state:
    st.session_state.messages = []

# Password protection
if "authenticated" not in st.session_state:
    st.session_state["authenticated"] = False

if not st.session_state["authenticated"]:
    password = st.text_input("Enter password", type="password")
    if password:
        if password == os.environ.get("APP_PASSWORD"):
            st.session_state["authenticated"] = True
            st.rerun()
        else:
            st.error("Incorrect password. Please try again.")
    st.stop()

st.markdown("---")

# Knowledge base selection in sidebar
with st.sidebar:
    st.subheader("Knowledge Base (Optional)")
    st.write("Select a knowledge base to enhance your chat with domain-specific knowledge, or leave blank to use the general Claude model.")
    kb_map = {"None": "", "Astrology": "6YC60AQVKG"}  # Add more as needed
    kb_names = list(kb_map.keys())
    kb_selected_name = st.selectbox("Knowledge Base:", kb_names, index=0)
    kb_selected_id = kb_map[kb_selected_name]

st.markdown("---")

# Display the existing chat messages via `st.chat_message`.
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Create a chat input field to allow the user to enter a message. This will display
# automatically at the bottom of the page.
if prompt := st.chat_input("What is up?"):

    # Store and display the current prompt.
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Spinner while generating response
    with st.spinner("Assistant is thinking..."):
        if kb_selected_id:
            response = retrieve_and_generate_with_kb(st.session_state.messages, knowledge_base=kb_selected_id)
        else:
            response = invoke_claude(st.session_state.messages)

    # Display and store the response.
    with st.chat_message("assistant"):
        st.markdown(response)
    st.session_state.messages.append({"role": "assistant", "content": response})
